{
  "StartAt": "checkOrderStatus",
  "States": {
    "checkOrderStatus": {
      "Next": "latestOrderStatus",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed", "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 4,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [ "States.ALL" ],
          "ResultPath": "$.errorInfo",
          "Next": "orderInFailedState"
        }
      ],
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${checkOrderStatusLambdaArn}",
        "Payload.$": "$"
      }
    },
    "latestOrderStatus": {
      "Type": "Choice",
      "InputPath": "$.Payload",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.orderStatus",
              "StringEquals": "cancelled"
            },
            {
              "Variable": "$.orderStatus",
              "StringEquals": "filled"
            },
            {
              "Variable": "$.orderStatus",
              "StringEquals": "expired"
            },
            {
              "Variable": "$.orderStatus",
              "StringEquals": "error"
            }
          ],
          "Next": "orderInTerminalState"
        }
      ],
      "Default": "waitStep"
    },
    "waitStep": {
      "Type": "Wait",
      "SecondsPath": "$.retryWaitSeconds",
      "Next": "checkOrderStatus"
    },
    "orderInFailedState": {
      "Type": "Fail",
      "Error": "Order in failed state"
    },
    "orderInTerminalState": {
      "Type": "Succeed"
    }
  }
}
